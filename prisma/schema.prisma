datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

enum UserPlans {
  FREE
  PERSONAL
  PRO
}

// NEXT AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  plan          UserPlans @default(FREE)
  accounts      Account[]
  sessions      Session[]
  Spaces        Spaces[]
  Files         Files[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// NEXT AUTH ENDS

enum SpacePlan {
  FREE
  TEAM
  TEAMPLUS
}

model Spaces {
  id          String @id @default(cuid())
  name        String
  description String
  icon        String
  colors      Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  whiteboards Whiteboards[]

  plan SpacePlan @default(FREE)

  @@map("spaces")
}

model Whiteboards {
  id   String @id @default(cuid())
  name String
  icon String

  // We want to have each user with his permissions (read/write/admin) stored in the whiteboard 
  // if not in the TeamPlus plan we want to make sure that only the owner has access to the whiteboard 
  permissions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  spaces            Spaces?             @relation(fields: [spacesId], references: [id], onDelete: Cascade)
  spacesId          String?
  WhiteboardElement WhiteboardElement[]

  @@map("whiteboards")
}

enum WhiteboardElementType {
  // text
  TEXT
  LINK

  // media
  IMAGE
  VIDEO
  AUDIO

  // colors
  COLOR

  // one-to-many referers
  MINIMAP
}

model WhiteboardElement {
  id   String                @id @default(cuid())
  data Json // using a json as its easier to have media support (search)
  type WhiteboardElementType

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  whiteboard    Whiteboards @relation(fields: [whiteboardsId], references: [id])
  whiteboardsId String

  parentElementId   String?
  parentElement     WhiteboardElement?  @relation("ParentSubElements", fields: [parentElementId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  WhiteboardElement WhiteboardElement[] @relation("ParentSubElements")

  @@map("whiteboard_element")
}

model Files {
  id   String @id @default(cuid())
  name String
  type String
  size Int
  url  String
  user User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String
}
